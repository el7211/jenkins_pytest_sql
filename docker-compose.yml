services:
  sqlserver:
    build:
      context: .
      dockerfile: Dockerfile.sqlserver
    container_name: test-sql
    ports:
      - "1433:1433"
    volumes:
      - ./init-data.sql:/init-data.sql
    environment:
      SA_PASSWORD: ${MYSQL_SA_PASSWORD}
      ACCEPT_EULA: "Y"
    command: >
      /bin/bash -c "
        /opt/mssql/bin/sqlservr & 
        for i in {1..10}; do
          /opt/mssql-tools/bin/sqlcmd -S localhost -U sa -P ${MYSQL_SA_PASSWORD} -Q 'SELECT 1' && break
          echo 'Waiting for SQL Server to be ready...'
          sleep 5
        done &&
        /opt/mssql-tools/bin/sqlcmd -S localhost -U sa -P ${MYSQL_SA_PASSWORD} -i /init-data.sql &&
        wait
      "
    healthcheck:
      test: [ "CMD", "sqlcmd", "-S", "127.0.0.1,1433", "-U", "sa", "-P", "${MYSQL_SA_PASSWORD}", "-Q", "SELECT 1" ]
      interval: 10s
      timeout: 5s
      retries: 10
  pytest-runner:
    env_file:
      - .env
    image: python:3.11
    container_name: test-runner
    depends_on:
      sqlserver:
        condition: service_healthy
    volumes:
      - ./tests:/tests
      - ./requirements.txt:/requirements.txt
    working_dir: /tests
    command: >
      bash -c "
        pip install -r /requirements.txt &&
        pytest -s &&    
        tail -f /dev/null"
# Run pytest with the -s flag to capture print statements in the output
# tail -f /dev/null is to keep pytest-runner alive after running the test